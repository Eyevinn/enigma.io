#!/usr/bin/env node

const GetOpt = require("node-getopt");
const debug = require("debug")("enigma-cli-assets");

const ExposureAPI = require("../index.js")("exposure");
const ManagementAPI = require("../index.js")("mgmt");

try {
  const getopt = new GetOpt([
    ["c", "cu=ARG", "customer unit"],
    ["b", "bu=ARG", "business unit"],
    ["", "session=ARG", "session token"],
    ["", "credentials=USER:PWD", "provide username and password"],
    ["h", "help", "Display this help"]
  ]);
  getopt.setHelp(
    "Usage: enigma-assets [OPTION] command\n" +
      "play\t\tObtain playback URL for an asset\n" +
      "create\t\tCreate a placeholder asset with only a title and metadata (optional)\n" +
      "link\t\tCreate a relation between two assets\n" +
      "ingest\t\tIngest video to a placeholder asset\n" +
      "[[OPTIONS]]\n\n" +
      "Examples:\n" +
      '  Obtain playback URL for an asset:\n    enigma-assets -c CU -b BU --session="SESSIONTOKEN" play ASSETID\n' +
      "  Upload an asset:\n    enigma-assets -c CU -b BU ingest ASSETID VIDEO-URL\n" +
      '  Create an asset:\n    enigma-assets -c CU -n BU create "TITLE" ["METADATA"]\n' +
      "  Link two assets:\n    enigma-assets -c CU -b BU link FROM TO\n"
  );
  getopt.bindHelp();

  const opts = getopt.parseSystem();
  const options = opts.options;

  const cmd = opts.argv[0];
  if (!cmd) {
    getopt.showHelp();
    process.exit(2);
  }

  if (!options.cu) {
    throw "Must provide customer unit argument";
  }
  if (!options.bu) {
    throw "Must provide business unit argument";
  }

  const exposureApi = new ExposureAPI(options.cu, options.bu);
  const mgmtApi = new ManagementAPI(options.cu, options.bu);
  let assetId;
  let title;
  let description = "";
  let metadata;
  let videoUrl;
  let sessionToken = options.session;

  switch (cmd) {
    case "play":
    case "PLAY":
      assetId = opts.argv[1];
      if (!assetId) {
        throw "Must provide asset ID";
      }
      if (!sessionToken && !options.credentials) {
        throw "Must provide a session token";
      }
      if (!sessionToken && options.credentials) {
        const creds = options.credentials.split(":");
        authAndPlayAsset(exposureApi, creds[0], creds[1], assetId);
      } else {
        playAsset(exposureApi, sessionToken, assetId);
      }
      break;
    case "create":
    case "CREATE":
      title = opts.argv[1];
      description = opts.argv[2];
      if (description) {
        metadata = {
          languages: ["en"],
          en: {
            description: description
          }
        };
      }
      if (title) {
        createAsset(mgmtApi, title, metadata);
      } else {
        throw "You need to provide a title for the asset";
      }
      break;
    case "link":
    case "LINK":
      if (opts.argv[1] && opts.argv[2]) {
        linkAssets(mgmtApi, opts.argv[1], opts.argv[2]);
      } else {
        throw "You need to provide both a source asset ID and a destination asset ID";
      }
      break;
    case "ingest":
    case "INGEST":
      assetId = opts.argv[1];
      videoUrl = opts.argv[2];
      if (assetId && videoUrl) {
        ingestVideo(mgmtApi, assetId, videoUrl);
      } else {
        throw "No asset ID and video URL provided";
      }
      break;
  }
} catch (errObj) {
  console.log(errObj);
  process.exit(1);
}

async function authAndPlayAsset(api, username, password, assetId) {
  const authResponse = await api.authenticate(username, password);
  return await playAsset(api, authResponse.sessionToken, assetId);
}

async function playAsset(api, sessionToken, assetId) {
  try {
    const playResponse = await api.play(sessionToken, assetId);
    debug(playResponse);
    const hlsFormat = playResponse.formats.find(a => a.format === "HLS");
    if (!hlsFormat) {
      throw "No HLS medialocator was found";
    }
    console.log(hlsFormat.mediaLocator);
  } catch (errorMessage) {
    console.log("Failed to obtain a playable URL: " + errorMessage);
  }
}

async function createAsset(api, title, metadata) {
  try {
    const id = await api.createAsset(title, metadata);
    console.log(`Created asset: ${id}`);
  } catch (errorMessage) {
    console.log("Failed to create asset: " + errorMessage);
  }
}

async function linkAssets(api, srcAssetId, destAssetId) {
  try {
    await api.linkAssets(srcAssetId, destAssetId);
    console.log(`Created a link from ${srcAssetId} to ${destAssetId}`);
  } catch (errorMessage) {
    console.log("Failed to link assets: " + errorMessage);
  }
}

async function ingestVideo(api, assetId, videoUrl) {
  try {
    await api.ingestVideo(assetId, videoUrl);
    console.log(`Video ingest for asset ID ${assetId} initiated`);
  } catch (errorMessage) {
    console.log("Failed to ingest video: " + errorMessage);
  }
}