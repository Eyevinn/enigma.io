#!/usr/bin/env node

const GetOpt = require("node-getopt");
//const debug = require("debug")("enigma-cli-users");
const { RateLimit } = require("async-sema");

const ManagementAPI = require("../index.js")("mgmt");
const ExposureAPI = require("../index.js")("exposure");

try {
  const getopt = new GetOpt([
    ["c", "cu=ARG", "customer unit"],
    ["b", "bu=ARG", "business unit"],
    ["", "limit=N", "limit list output to N rows"],
    [
      "",
      "bulk",
      "perform bulk operation by reading emails in newline delimited input from STDIN"
    ],
    ["h", "help", "Display this help"]
  ]);
  getopt.setHelp(
    "Usage: enigma-users [OPTION] command\n" +
      "auth\t\tAuthenticate and obtain a session token\n" +
      "list\t\tList all users\n" +
      "offerings\tList all available offerings\n" +
      "purchase\tAdd a product offering to an account\n" +
      "[[OPTIONS]]\n\n" +
      "Examples:\n" +
      "  List all users:\n    enigma-users -c CU -b BU list\n" +
      "  Add a product offering on an account:\n    enigma-users -c CU -b BU purchase OFFERINGID EMAIL\n" +
      "  Add a product offering to a bulk of accounts:\n    enigma-users -c CU -b BU --bulk purchase OFFERINGID < users.txt\n" +
      "  Obtain a session token for a user:\n    enigma-users -c CU -b BU auth EMAIL PASSWORD"
  );
  getopt.bindHelp();

  const opts = getopt.parseSystem();
  const options = opts.options;

  const cmd = opts.argv[0];
  if (!cmd) {
    getopt.showHelp();
    process.exit(1);
  }

  if (!process.env.API_KEY_ID && !process.env.API_KEY_SECRET) {
    console.log("Must set environment variables API_KEY_ID and API_KEY_SECRET");
    process.exit(2);
  }

  if (!options.cu) {
    throw "Must provide customer unit argument";
  }
  if (!options.bu) {
    throw "Must provide business unit argument";
  }
  const mgmtApi = new ManagementAPI(options.cu, options.bu);
  const exposureApi = new ExposureAPI(options.cu, options.bu);
  let offeringId;
  let email;
  let password;

  switch (cmd) {
    case "list":
    case "LIST":
      listAllUsers(mgmtApi, options.limit);
      break;
    case "offerings":
    case "OFFERINGS":
      listAllOfferings(mgmtApi);
      break;
    case "purchase":
    case "PURCHASE":
      offeringId = opts.argv[1];
      email = opts.argv[2];
      if (!offeringId) {
        throw "Must provide offering ID";
      }
      if (!options.bulk && !email) {
        throw "Must provide email";
      }
      if (options.bulk) {
        const readline = require("readline");
        const rl = readline.createInterface({
          input: process.stdin
        });
        rl.on("line", async line => {
          let email = line;
          // TODO should validate email
          if (email) {
            const lim = RateLimit(1);
            await lim();
            performPurchase(mgmtApi, offeringId, email);
          }
        });
      } else {
        performPurchase(mgmtApi, offeringId, email);
      }
      break;
    case "auth":
    case "AUTH":
      email = opts.argv[1];
      password = opts.argv[2];
      if (!email || !password) {
        throw "Username and password must be provided";
      }
      authenticate(exposureApi, email, password);
      break;
  }
} catch (errObj) {
  console.log(errObj);
  process.exit(3);
}

async function listAllUsers(api, limit = undefined) {
  try {
    const endUsers = await api.getEndUsers(limit);
    console.log("#AccountId\tEmailAddress\tCreated");
    endUsers.forEach(endUser => {
      console.log(
        `${endUser.accountId}\t${endUser.details.emailAddress}\t${endUser.created}`
      );
    });
  } catch (errorMessage) {
    console.log("Failed to list users: " + errorMessage);
  }
}

async function listAllOfferings(api) {
  try {
    const offerings = await api.getProductOfferings();
    offerings.forEach(offering => {
      let name = offering.localizedMetadata[0].name;
      console.log(`${name} (${offering.productOfferingId}):`);
      console.log(`  Sales start: ${offering.salesStart}`);
      offering.productIds.forEach(productId => {
        console.log(`  - ${productId}`);
      });
    });
  } catch (errorMessage) {
    console.log("Failed to get offerings: " + errorMessage);
  }
}

async function performPurchase(api, offeringId, email) {
  try {
    let user = await api.getEndUser(email);
    let purchases = await api.getPurchases(user.accountId);
    if (purchases.find(purchase => purchase.productOfferingId === offeringId)) {
      throw `${email} has already purchased offering with ID ${offeringId}`;
    } else {
      let purchase = await api.performPurchase(user.accountId, offeringId);
      console.log(
        `Succesfully performed purchase for ${email} (Account ID=${user.accountId}, Purchase ID=${purchase.purchaseId}, Transaction ID=${purchase.transactionId})`
      );
    }
  } catch (errorMessage) {
    console.log(`Failed to perform purchase for ${email}: ` + errorMessage);
  }
}

async function authenticate(api, username, password) {
  try {
    let authResponse = await api.authenticate(username, password);
    console.log(authResponse.sessionToken);
  } catch (errorMessage) {
    console.log(`Failed to authenticate ${username}: ` + errorMessage);
  }
}